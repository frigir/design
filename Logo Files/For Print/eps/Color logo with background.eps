%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2369 992
%%HiResBoundingBox: 0 0 2368.0798 991.91998
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2368.0798 991.91998 re
W
q
[0.24 0 0 -0.24 0 991.91998] cm
q
0 0 9862.5 4131.25 re
W*
q
[3.124976 0 0 3.124976 0.037808 0] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 3156.25 1321.58826 re
f
Q
q
[13.867786 0 0 13.867786 244.17656 659.17462] cm
/DeviceRGB {} CS
[0.1647 0.4706 0.5569] SC
/DeviceRGB {} cs
[0.1647 0.4706 0.5569] sc
100.214996 200.42999 m
155.473999 200.42999 200.42999 155.473999 200.42999 100.214996 c
200.42999 44.955994 155.473999 0 100.214996 0 c
44.955994 0 0 44.956001 0 100.214996 c
0 155.473999 44.956001 200.42999 100.214996 200.42999 c
h
100.214996 10 m
149.959991 10 190.42999 50.470001 190.42999 100.214996 c
190.42999 149.959991 149.959991 190.42999 100.214996 190.42999 c
50.470001 190.42999 10 149.959 10 100.214996 c
10 50.470993 50.470001 10 100.214996 10 c
h
f
Q
q
[-19.092182 0 0 -19.092182 2590.3765 21198.678] cm
/DeviceRGB {} CS
[0.1647 0.4706 0.5569] SC
/DeviceRGB {} cs
[0.1647 0.4706 0.5569] sc
31.281048 958.32837 m
26.246109 958.32837 21.199387 960.22253 17.374798 964.04712 c
9.725584 971.69635 9.725593 984.21039 17.374798 991.85962 c
24.306898 998.79163 35.228416 999.42944 42.906048 993.79712 c
71.187302 1022.07831 l
61.906052 1031.35962 l
61.829002 1031.42688 61.755589 1031.49792 61.68581 1031.57275 c
61.616024 1031.64758 61.550236 1031.72571 61.488445 1031.80725 c
61.426647 1031.88867 61.369167 1031.97314 61.316006 1032.06042 c
61.262848 1032.14783 61.214283 1032.23767 61.170311 1032.33008 c
61.126339 1032.42249 61.087196 1032.51685 61.052876 1032.61316 c
61.018555 1032.70947 60.989239 1032.80737 60.964924 1032.90674 c
60.940605 1033.00598 60.921421 1033.10632 60.907364 1033.20764 c
60.893307 1033.30884 60.884453 1033.41064 60.880802 1033.51282 c
60.877151 1033.61499 60.878727 1033.71716 60.885521 1033.81921 c
60.892315 1033.92139 60.904297 1034.02283 60.921467 1034.12366 c
60.938633 1034.22437 60.960899 1034.3241 60.988262 1034.42261 c
61.015625 1034.52112 61.047939 1034.61804 61.085213 1034.71326 c
61.122482 1034.80859 61.164513 1034.90173 61.211308 1034.99268 c
61.258099 1035.08362 61.309406 1035.172 61.365234 1035.25769 c
61.421055 1035.34338 61.481102 1035.42603 61.545376 1035.50549 c
61.60965 1035.58496 61.677811 1035.66101 61.749863 1035.73364 c
61.821915 1035.80627 61.89748 1035.875 61.976563 1035.93994 c
62.055645 1036.00476 62.137829 1036.06543 62.223114 1036.12195 c
62.308395 1036.17834 62.396336 1036.23022 62.486931 1036.27759 c
62.577526 1036.32507 62.670311 1036.3678 62.765278 1036.40576 c
62.860245 1036.44373 62.956898 1036.47681 63.055244 1036.50488 c
63.153591 1036.53296 63.253109 1036.55591 63.353802 1036.57385 c
63.454494 1036.5918 63.55584 1036.60449 63.657837 1036.61206 c
63.75983 1036.61951 63.861946 1036.62183 63.96418 1036.6189 c
64.066414 1036.61597 64.168236 1036.60791 64.269646 1036.5946 c
64.371048 1036.5813 64.471504 1036.56287 64.57103 1036.53931 c
64.67054 1036.51575 64.7686 1036.48706 64.865196 1036.45349 c
64.961792 1036.41992 65.056419 1036.38147 65.149078 1036.33813 c
65.241737 1036.2948 65.331947 1036.24695 65.419716 1036.19446 c
65.507484 1036.14197 65.592346 1036.08508 65.674301 1036.02393 c
65.756248 1035.96277 65.834862 1035.89746 65.910141 1035.82825 c
65.98542 1035.75903 66.056969 1035.68616 66.124802 1035.60962 c
75.437302 1026.32837 l
81.093552 1031.98462 l
71.812302 1041.26587 l
71.672768 1041.4054 71.548195 1041.55725 71.438568 1041.72131 c
71.328941 1041.88538 71.236374 1042.05859 71.160858 1042.24084 c
71.08535 1042.4231 71.028343 1042.61108 70.989845 1042.80457 c
70.951347 1042.99805 70.932098 1043.19348 70.932106 1043.39087 c
70.932098 1043.58826 70.951347 1043.78357 70.989845 1043.97705 c
71.028343 1044.17053 71.08535 1044.35852 71.160858 1044.54077 c
71.236374 1044.72302 71.328941 1044.89612 71.438568 1045.0603 c
71.548195 1045.22437 71.672768 1045.37622 71.812302 1045.51575 c
71.951828 1045.65527 72.10363 1045.77979 72.2677 1045.8894 c
72.43177 1045.99915 72.60495 1046.09167 72.787254 1046.16724 c
72.969559 1046.2428 73.157471 1046.2998 73.351006 1046.33826 c
73.54454 1046.37671 73.739975 1046.396 73.937294 1046.396 c
74.134621 1046.396 74.330048 1046.37671 74.523582 1046.33826 c
74.717117 1046.2998 74.905037 1046.2428 75.087341 1046.16724 c
75.269646 1046.0918 75.442825 1045.99927 75.606895 1045.88965 c
75.770966 1045.78003 75.922768 1045.6554 76.062302 1045.51587 c
87.312302 1034.26587 l
87.448387 1034.15198 87.573387 1034.02698 87.687302 1033.89087 c
87.69796 1033.87036 87.708374 1033.84973 87.718552 1033.82886 c
87.761925 1033.7782 87.803589 1033.72607 87.843552 1033.67261 c
87.864967 1033.64172 87.885803 1033.61035 87.906052 1033.57861 c
87.938896 1033.52747 87.970146 1033.47546 87.999802 1033.42236 c
88.074028 1033.28528 88.137199 1033.14343 88.189316 1032.99658 c
88.241432 1032.84973 88.28186 1032.69983 88.3106 1032.54663 c
88.339348 1032.39343 88.356064 1032.23901 88.360741 1032.08313 c
88.365417 1031.92749 88.358009 1031.77234 88.338509 1031.61768 c
88.319016 1031.46313 88.287666 1031.31104 88.244461 1031.16125 c
88.201248 1031.01147 88.146706 1030.86609 88.080833 1030.72485 c
88.014961 1030.58362 87.938553 1030.44836 87.851616 1030.31897 c
87.764664 1030.1897 87.668228 1030.06799 87.562302 1029.95361 c
87.531731 1029.92151 87.500481 1029.89026 87.468552 1029.85962 c
87.468552 1029.82861 l
87.370979 1029.72754 87.266815 1029.63379 87.156052 1029.54736 c
77.968552 1020.35986 l
77.770142 1020.0791 77.530556 1019.83948 77.249802 1019.64105 c
47.156052 989.54736 l
52.760773 981.87164 52.108883 970.96893 45.187302 964.04736 c
41.362701 960.22278 36.31599 958.32861 31.281052 958.32861 c
31.281048 958.32837 l
h
31.281048 964.29712 m
34.767406 964.29413 38.25914 965.61896 40.937298 968.29712 c
46.29361 973.65344 46.29361 982.2533 40.937298 987.60962 c
35.580948 992.96594 26.981117 992.96594 21.624798 987.60962 c
16.268488 982.2533 16.268448 973.65344 21.624798 968.29712 c
24.302958 965.61896 27.794687 964.3006 31.281048 964.29712 c
h
f
Q
q
[176.09546 0 0 176.09546 3339.5405 -601.11945] cm
/DeviceRGB {} CS
[0.1569 0.4118 0.5451] SC
/DeviceRGB {} cs
[0.1569 0.4118 0.5451] sc
6.84 6.7 m
6.54 6.56 6.04 6.38 5.4 6.64 c
4.42 7.08 4.26 7.48 4.26 9.12 c
4.26 10.12 l
6.84 10.12 l
6.84 11.8 l
4.26 11.8 l
4.26 20 l
2.2 20 l
2.2 11.8 l
1 11.8 l
1 10.12 l
2.2 10.12 l
2.2 9.12 l
2.2 7.56 2.2 7.2 2.8 6.22 c
3.44 5.16 4.480001 4.8 5.66 4.8 c
6.2 4.8 6.58 4.94 6.84 5.1 c
6.84 6.7 l
h
14.58 10.24 m
14.14 11.86 l
14 11.78 13.56 11.639999 13.200001 11.639999 c
11.500001 11.639999 10.700001 13.259999 10.700001 15.259999 c
10.700001 20 l
8.640001 20 l
8.640001 10.12 l
10.700001 10.12 l
10.700001 11.52 l
10.940001 10.599999 12.000001 9.94 13.18 9.94 c
13.72 9.94 14.3 10.08 14.58 10.24 c
h
18.139999 10.12 m
18.139999 20 l
16.08 20 l
16.08 10.12 l
18.139999 10.12 l
h
18.24 6.5 m
18.24 7.14 17.74 7.64 17.1 7.64 c
16.479999 7.64 15.980001 7.14 15.980001 6.5 c
15.980001 5.88 16.479999 5.38 17.1 5.38 c
17.74 5.38 18.24 5.88 18.24 6.5 c
h
28.34 10.12 m
30.4 10.12 l
30.4 20.16 l
30.4 23.1 28.1 25.48 25.26 25.48 c
23.780001 25.48 22.440001 24.82 21.5 23.779999 c
22.92 22.499998 l
23.48 23.299997 24.32 23.799997 25.26 23.799997 c
26.960001 23.799997 28.34 22.159998 28.34 20.159998 c
28.34 19.239998 l
27.68 19.779999 26.460001 20.179998 25.5 20.179998 c
22.66 20.179998 20.559999 17.999998 20.559999 15.059999 c
20.559999 12.119999 22.66 9.919998 25.5 9.919998 c
26.459999 9.919998 27.559999 10.279998 28.34 10.879998 c
28.34 10.119998 l
28.34 10.12 l
h
25.700001 18.5 m
26.820002 18.5 27.800001 17.98 28.34 16.92 c
28.620001 16.379999 28.780001 15.74 28.780001 15.06 c
28.780001 14.380001 28.620001 13.740001 28.34 13.18 c
27.799999 12.120001 26.82 11.620001 25.700001 11.620001 c
24 11.620001 22.620001 13.040001 22.620001 15.060001 c
22.620001 17.060001 24 18.500002 25.700001 18.500002 c
25.700001 18.5 l
h
35.560001 10.12 m
35.560001 20 l
33.5 20 l
33.5 10.12 l
35.560001 10.12 l
h
35.66 6.5 m
35.66 7.14 35.16 7.64 34.52 7.64 c
33.900002 7.64 33.400002 7.14 33.400002 6.5 c
33.400002 5.88 33.900002 5.38 34.52 5.38 c
35.16 5.38 35.66 5.88 35.66 6.5 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
